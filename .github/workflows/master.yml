name: Build and Push Docker Image to Docker Hub

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:


env:
  REGISTRY: docker.io
  IMAGE: maximchp/weatherapp
  TF_LOG: INFO
  TF_INPUT: false
  TF_CONFIG_DIRECTORY: "./terraform/eks"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:

  version:
    name: version
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.version }}

    steps:
      
    - name: Checkout
      uses: actions/checkout@v3

    - name: Read HEAD and MINOR from file
      id: read_head_minor
      run: |
        head=$(cat HEAD.ver)
        echo "HEAD=${head}" >> $GITHUB_ENV

        minor=$(cat MINOR.ver)
        echo "MINOR=${minor}" >> $GITHUB_ENV
    
    - name: Determine and update head
      if: github.ref == 'refs/heads/master' # Increment head only for builds on master/main
      id: determine_head
      run: |
        echo "HEAD=$((HEAD + 1))" >> $GITHUB_ENV
        echo "${{ env.HEAD }}" > ${{ github.workspace }}/HEAD.ver

    - name: Reset minor
      if: github.ref == 'refs/heads/master' # Reset minor for builds on master/main
      id: reset_minor
      run: |
        echo "MINOR=0" >> $GITHUB_ENV
        echo "${{ env.MINOR }}" > ${{ github.workspace }}/MINOR.ver 
    
    - name: Set version
      id: version
      run: |
        output=$(bash generate_version.sh head=${{ env.HEAD }} minor=${{ env.MINOR }})
        echo "VERSION=${output}" >> $GITHUB_ENV
        echo "VERSION=${output}" >> $GITHUB_OUTPUT
        echo "${output}" > ${{ github.workspace }}/VERSION.ver

    - name: Version POM
      run: mvn -B versions:set -DnewVersion=${{ env.VERSION }}-SNAPSHOT -DgenerateBackupPoms=false

    #https://github.com/marketplace/actions/add-commit    
    - name: Commit changes to VERSION and HEAD and POM.xml files & tag
      uses: EndBug/add-and-commit@v9
      with:
        author_name: $GITHUB_ACTOR
        message: 'This commit was done through GitHub Actions'
        tag: '${{ env.VERSION }} --force'  
        
  snyk:
    name: Run Snyk to check for vulnerabilities
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Snyk
      run: npm install -g snyk

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk test for maven project dependencies
      run: snyk test --severity-threshold=critical

    - name: Run Snyk test for all project dependencies
      run: snyk test --all-projects --severity-threshold=critical
      
  scan-dockerfile:
    name: Run hadolint & trivy to check dockerfile
    runs-on: ubuntu-latest
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile

    - name: Install Trivy
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install -y trivy

    - name: Scan Dockerfile for vulnerabilities
      run: trivy fs --exit-code 1 --severity HIGH,CRITICAL .      
  
  build:
    name: build and sign docker container
    runs-on: ubuntu-latest
    needs: [version, snyk, scan-dockerfile]  # Wait for build to complete successfully

    steps:

    - name: Checkout
      uses: actions/checkout@v3

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3.5.0

    - name: Auth to DockerHub registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_PASS }}
            
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE }}

    - name: Build and push
      uses: docker/build-push-action@v3
      env:
        VERSION: ${{ needs.version.outputs.VERSION }}  # to get version from previous job.
      with:
        push: true
        tags: |
          ${{ env.IMAGE }}:${{ env.VERSION }}
        build-args: |
          "VERSION=${{ env.VERSION }}"
        cache-from: type=gha
        cache-to: type=gha,mode=max
           
    - name: Sign image using cosign
      run: |
        cosign sign --yes --key env://COSIGN_PRIVATE_KEY docker.io/${{ env.IMAGE }}:${{ env.VERSION }}
      shell: bash
      env:
        VERSION: ${{ needs.version.outputs.VERSION }}  # to get version from previous job.
        COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}   


  terraform:
    name: terraform
    runs-on: ubuntu-latest
    needs: [ build ]  # Wait for build to complete successfully
    environment: production
    steps:

    - uses: actions/checkout@v4
      with:
        sparse-checkout: | # fetch only terraform folder
          terraform
    
    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.8.3"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: il-central-1

    - name: Terraform init
      id: init
      run: terraform init
      working-directory: ${{ env.TF_CONFIG_DIRECTORY }}

    - name: Terraform format
      id: fmt
      run: terraform fmt -check
      working-directory: ${{ env.TF_CONFIG_DIRECTORY }}
      continue-on-error: true

    - name: Terraform validate
      id: validate
      run: terraform validate
      working-directory: ${{ env.TF_CONFIG_DIRECTORY }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color    
      working-directory: ${{ env.TF_CONFIG_DIRECTORY }}

    - name: Terraform Apply
      if: github.ref == 'refs/heads/$$$$$master' && github.event_name == 'push'
      run: terraform apply -auto-approve
      working-directory: ${{ env.TF_CONFIG_DIRECTORY }}
      
  
  deploy:
    name: EKS deployment
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    needs: [ version, build, terraform ]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v4
        with:
          sparse-checkout: | # fetch only kubernetes folder
            kubernetes

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Verify images signed with cosign
        run: |
          cosign verify --insecure-ignore-tlog --key env://COSIGN_PUBLIC_KEY docker.io/${{ env.IMAGE }}:v6.4.0
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          VERSION: ${{ needs.version.outputs.VERSION }}  # to get version from previous job.            

      - name: Install kubectl
        uses: azure/setup-kubectl@v2.0
        id: install_kube
        with:
          version: 'v1.24.0' # default is latest stable

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1

      - name: Update kube config
        run: aws eks update-kubeconfig --name tf-cluster

      - name: Create docker secret for docker registry
        run: |
          kubectl create secret docker-registry dockerhub-registry \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ secrets.DOCKERHUB_USER }} \
            --docker-password=${{ secrets.DOCKERHUB_PASS }}

      - name: Deploy metrics server to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        with:
          namespace: kube-system
          manifests: |
            kubernetes/metrics-server.yaml
  
      - name: Verify images signed with cosign
        run: |
          cosign verify --insecure-ignore-tlog --key env://COSIGN_PUBLIC_KEY docker.io/${{ env.IMAGE }}:${{ env.VERSION }}
        env:
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          VERSION: ${{ needs.version.outputs.VERSION }}  # to get version from previous job.            

      - name: Deploy app to the Kubernetes cluster
        uses: azure/k8s-deploy@v1
        env:
          VERSION: ${{ needs.version.outputs.VERSION }}  # to get version from version job.
        with:
          namespace: default
          manifests: |
            kubernetes/deployment.yaml
          images: |
            docker.io/${{ env.IMAGE }}:${{ env.VERSION }}
